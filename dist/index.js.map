{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["/*! bittorrent-protocol. MIT License. WebTorrent LLC <https://webtorrent.io/opensource> */\nimport bencode from 'bencode'\nimport BitField from 'bitfield'\n// import crypto from 'crypto'\nimport crypto from '@bicycle-codes/one-webcrypto'\nimport RC4 from 'rc4'\nimport { Duplex } from 'streamx'\nimport {\n    hash,\n    concat,\n    equal,\n    hex2arr,\n    arr2hex,\n    text2arr,\n    arr2text,\n    randomBytes\n} from '@substrate-system/uint8-util'\nimport throughput from 'throughput'\nimport arrayRemove from 'unordered-array-remove'\nimport Debug from '@substrate-system/debug'\nconst debug = Debug('bittorrent-protocol')\n\nconst BITFIELD_GROW = 400000\nconst KEEP_ALIVE_TIMEOUT = 55000\nconst ALLOWED_FAST_SET_MAX_LENGTH = 100\n\nconst MESSAGE_PROTOCOL = text2arr('\\u0013BitTorrent protocol')\nconst MESSAGE_KEEP_ALIVE = new Uint8Array([0x00, 0x00, 0x00, 0x00])\nconst MESSAGE_CHOKE = new Uint8Array([0x00, 0x00, 0x00, 0x01, 0x00])\nconst MESSAGE_UNCHOKE = new Uint8Array([0x00, 0x00, 0x00, 0x01, 0x01])\nconst MESSAGE_INTERESTED = new Uint8Array([0x00, 0x00, 0x00, 0x01, 0x02])\nconst MESSAGE_UNINTERESTED = new Uint8Array([0x00, 0x00, 0x00, 0x01, 0x03])\n\nconst MESSAGE_RESERVED = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]\nconst MESSAGE_PORT = [0x00, 0x00, 0x00, 0x03, 0x09, 0x00, 0x00]\n\n// BEP6 Fast Extension\nconst MESSAGE_HAVE_ALL = new Uint8Array([0x00, 0x00, 0x00, 0x01, 0x0E])\nconst MESSAGE_HAVE_NONE = new Uint8Array([0x00, 0x00, 0x00, 0x01, 0x0F])\n\nconst DH_PRIME = 'ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a36210000000000090563'\nconst DH_GENERATOR = 2\nconst VC = new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])\nconst CRYPTO_PROVIDE = new Uint8Array([0x00, 0x00, 0x01, 0x02])\nconst CRYPTO_SELECT = new Uint8Array([0x00, 0x00, 0x00, 0x02]) // always try to choose RC4 encryption instead of plaintext\n\nfunction xor (a, b) {\n    for (let len = a.length; len--;) a[len] ^= b[len]\n    return a\n}\n\nclass Request {\n    piece\n    offset\n    length\n    callback\n\n    constructor (piece, offset, length, callback) {\n        this.piece = piece\n        this.offset = offset\n        this.length = length\n        this.callback = callback\n    }\n}\n\nclass HaveAllBitField {\n    buffer:Uint8Array\n\n    constructor () {\n        this.buffer = new Uint8Array() // dummy\n    }\n\n    get (_index?:number) {\n        return true\n    }\n\n    set (_index?:number) {}\n}\n\n// this.peerPieces = new BitField(0, { grow: BITFIELD_GROW })\n\n// this.extensions = {}\n// this.peerExtensions = {}\n\n// this.requests = [] // outgoing\n// this.peerRequests = [] // incoming\n\n// this.extendedMapping = {} // number -> string, ex: 1 -> 'ut_metadata'\n// this.peerExtendedMapping = {} // string -> number, ex: 9 -> 'ut_metadata'\n\n// // The extended handshake to send, minus the \"m\" field, which gets automatically\n// // filled from `this.extendedMapping`\n// this.extendedHandshake = {}\n\n// this.peerExtendedHandshake = {} // remote peer's extended handshake\n\n// // BEP6 Fast Estension\n// this.hasFast = false // is fast extension enabled?\n// this.allowedFastSet = [] // allowed fast set\n// this.peerAllowedFastSet = [] // peer's allowed fast set\n\n// this._ext = {} // string -> function, ex 'ut_metadata' -> ut_metadata()\n// this._nextExt = 1\n\n// this.uploaded = 0\n// this.downloaded = 0\n// this.uploadSpeed = throughput()\n// this.downloadSpeed = throughput()\n\n// this._keepAliveInterval = null\n// this._timeout = null\n// this._timeoutMs = 0\n// this._timeoutExpiresAt = null\n\n// this._finished = false\n\n// this._parserSize = 0 // number of needed bytes to parse next message from remote peer\n// this._parser = null // function to call once `this._parserSize` bytes are available\n\n// this._buffer = [] // incomplete message data\n// this._bufferSize = 0 // cached total length of buffers in `this._buffer`\n\n// this._peEnabled = peEnabled\n// if (peEnabled) {\n//     this._dh = crypto.createDiffieHellman(DH_PRIME, 'hex', DH_GENERATOR) // crypto object used to generate keys/secret\n//     this._myPubKey = this._dh.generateKeys('hex') // my DH public key\n// } else {\n//     this._myPubKey = null\n// }\n\nclass Wire extends Duplex {\n    _debugId:string\n    peerId:null|string\n    peerIdBuffer:null|Uint8Array\n    type:'webrtc'|'tcpIncoming'|'tcpOutgoing'|'webSeed'|null\n    amChoking:boolean\n    amInterested:boolean\n    peerChoking:boolean\n    peerInterested:boolean\n    _dh\n    _myPubKey:null|string\n    _setGenerators:boolean\n    _decryptGenerator\n    _encryptGenerator\n    _encryptMethod\n    // the maximum number of bytes resynchronization must occur within\n    _waitMaxBytes:number\n    // the pattern to search for when resynchronizing after receiving pe1/pe2\n    _cryptoSyncPattern\n    _peerPubKey  // peer's DH public key\n    _sharedSecret  // shared DH secret\n    _cryptoHandshakeDone:boolean\n    _peerCryptoProvide  // encryption methods provided by peer; we expect this\n    //                     to always contain 0x02\n    peerPieces:InstanceType<typeof BitField>\n    extensions:Record<string, any>\n    peerExtensions:Record<string, any>\n    requests:any[]  // outgoing\n    peerRequests:any[]  // incoming\n    extendedMapping:Record<number, string>  // number -> string, ex: 1 -> 'ut_metadata'\n    peerExtendedMapping:Record<string, number>  // string -> number, ex: 9 -> 'ut_metadata'\n    peerExtendedHandshake\n    // The extended handshake to send, minus the \"m\" field, which gets\n    //   automatically filled from `this.extendedMapping`\n    extendedHandshake = {}\n    // BEP6 Fast Estension\n    hasFast:boolean  // is fast extension enabled?\n    allowedFastSet  // allowed fast set\n    peerAllowedFastSet  // peer's allowed fast set\n    // string -> function, ex 'ut_metadata' -> ut_metadata()\n    _ext:Record<string, (any)=>any>\n    _nextExt:number\n    uploaded:number\n    downloaded:number\n    uploadSpeed:number\n    downloadSpeed:number\n\n    _keepAliveInterval = null\n    _timeout = null\n    _timeoutMs = 0\n    _timeoutExpiresAt = null\n    _finished:boolean\n    _parserSize:number  // number of needed bytes to parse next message from remote peer\n    _parser  // function to call once `this._parserSize` bytes are available\n    _buffer  // incomplete message data\n    _bufferSize:number  // cached total length of buffers in `this._buffer`\n    _peEnabled:boolean\n\n    constructor (type = null, retries = 0, peEnabled = false) {\n        super()\n\n        this._debugId = arr2hex(randomBytes(4))\n        this._debug('new wire')\n\n        this.peerId = null  // remote peer id (hex string)\n        this.peerIdBuffer = null // remote peer id (buffer)\n        // connection type ('webrtc', 'tcpIncoming', 'tcpOutgoing', 'webSeed')\n        this.type = type\n\n        this.amChoking = true  // are we choking the peer?\n        this.amInterested = false  // are we interested in the peer?\n\n        this.peerChoking = true  // is the peer choking us?\n        this.peerInterested = false  // is the peer interested in us?\n\n        // The largest torrent that I know of (the Geocities archive) is ~641 GB\n        // and has ~41,000 pieces. Therefore, cap bitfield to 10x larger\n        // (400,000 bits) to support all possible torrents but prevent\n        // malicious peers from growing bitfield to fill memory.\n        this.peerPieces = new BitField(0, { grow: BITFIELD_GROW })\n\n        this.extensions = {}\n        this.peerExtensions = {}\n\n        this.requests = []\n        this.peerRequests = []\n\n        this.extendedMapping = {}\n        this.peerExtendedMapping = {}\n\n        this.peerExtendedHandshake = {} // remote peer's extended handshake\n\n        // BEP6 Fast Estension\n        this.hasFast = false // is fast extension enabled?\n        this.allowedFastSet = [] // allowed fast set\n        this.peerAllowedFastSet = [] // peer's allowed fast set\n\n        this._ext = {} // string -> function, ex 'ut_metadata' -> ut_metadata()\n        this._nextExt = 1\n\n        this.uploaded = 0\n        this.downloaded = 0\n        this.uploadSpeed = throughput()\n        this.downloadSpeed = throughput()\n\n        this._keepAliveInterval = null\n        this._timeout = null\n        this._timeoutMs = 0\n        this._timeoutExpiresAt = null\n\n        this._finished = false\n        this._parserSize = 0 // number of needed bytes to parse next message from remote peer\n        this._parser = null // function to call once `this._parserSize` bytes are available\n        this._buffer = [] // incomplete message data\n        this._bufferSize = 0 // cached total length of buffers in `this._buffer`\n        this._peEnabled = peEnabled\n        if (peEnabled) {\n            // crypto object used to generate keys/secret\n            this._dh = crypto.createDiffieHellman(DH_PRIME, 'hex', DH_GENERATOR)\n            this._myPubKey = this._dh.generateKeys('hex') // my DH public key\n        } else {\n            this._myPubKey = null\n        }\n        this._peerPubKey = null // peer's DH public key\n        this._sharedSecret = null // shared DH secret\n        this._peerCryptoProvide = [] // encryption methods provided by peer; we expect this to always contain 0x02\n        this._cryptoHandshakeDone = false\n\n        this._cryptoSyncPattern = null // the pattern to search for when resynchronizing after receiving pe1/pe2\n        this._waitMaxBytes = null // the maximum number of bytes resynchronization must occur within\n        this._encryptionMethod = null // 1 for plaintext, 2 for RC4\n        this._encryptGenerator = null // RC4 keystream generator for encryption\n        this._decryptGenerator = null // RC4 keystream generator for decryption\n        this._setGenerators = false // a flag for whether setEncrypt() has successfully completed\n\n        this.once('finish', () => this._onFinish())\n\n        this.on('finish', this._onFinish)\n        this._debug('type:', this.type)\n\n        if (this.type === 'tcpIncoming' && this._peEnabled) {\n            // If we are not the initiator, we should wait to see if the client begins\n            // with PE/MSE handshake or the standard bittorrent handshake.\n            this._determineHandshakeType()\n        } else if (this.type === 'tcpOutgoing' && this._peEnabled && retries === 0) {\n            this._parsePe2()\n        } else {\n            this._parseHandshake(null)\n        }\n    }\n\n    /**\n   * Set whether to send a \"keep-alive\" ping (sent every 55s)\n   * @param {boolean} enable\n   */\n    setKeepAlive (enable) {\n        this._debug('setKeepAlive %s', enable)\n        clearInterval(this._keepAliveInterval)\n        if (enable === false) return\n        this._keepAliveInterval = setInterval(() => {\n            this.keepAlive()\n        }, KEEP_ALIVE_TIMEOUT)\n    }\n\n    /**\n   * Set the amount of time to wait before considering a request to be \"timed out\"\n   * @param {number} ms\n   * @param {boolean=} unref (should the timer be unref'd? default: false)\n   */\n    setTimeout (ms, unref) {\n        this._debug('setTimeout ms=%d unref=%s', ms, unref)\n        this._timeoutMs = ms\n        this._timeoutUnref = !!unref\n        this._resetTimeout(true)\n    }\n\n    destroy () {\n        if (this.destroyed) return\n        this._debug('destroy')\n        this.end()\n        return this\n    }\n\n    end (data) {\n        if (this.destroyed || this.destroying) return\n        this._debug('end')\n        this._onUninterested()\n        this._onChoke()\n        return super.end(data)\n    }\n\n    /**\n   * Use the specified protocol extension.\n   * @param  {function} Extension\n   */\n    use (Extension) {\n        const name = Extension.prototype.name\n        if (!name) {\n            throw new Error('Extension class requires a \"name\" property on the prototype')\n        }\n        this._debug('use extension.name=%s', name)\n\n        const ext = this._nextExt\n        const handler = new Extension(this)\n\n        function noop () {}\n\n        if (typeof handler.onHandshake !== 'function') {\n            handler.onHandshake = noop\n        }\n        if (typeof handler.onExtendedHandshake !== 'function') {\n            handler.onExtendedHandshake = noop\n        }\n        if (typeof handler.onMessage !== 'function') {\n            handler.onMessage = noop\n        }\n\n        this.extendedMapping[ext] = name\n        this._ext[name] = handler\n        this[name] = handler\n\n        this._nextExt += 1\n    }\n\n    //\n    // OUTGOING MESSAGES\n    //\n\n    /**\n   * Message \"keep-alive\": <len=0000>\n   */\n    keepAlive () {\n        this._debug('keep-alive')\n        this._push(MESSAGE_KEEP_ALIVE)\n    }\n\n    sendPe1 () {\n        if (this._peEnabled) {\n            const padALen = Math.floor(Math.random() * 513)\n            const padA = randomBytes(padALen)\n            this._push(concat([hex2arr(this._myPubKey), padA]))\n        }\n    }\n\n    sendPe2 () {\n        const padBLen = Math.floor(Math.random() * 513)\n        const padB = randomBytes(padBLen)\n        this._push(concat([hex2arr(this._myPubKey), padB]))\n    }\n\n    async sendPe3 (infoHash) {\n        await this.setEncrypt(this._sharedSecret, infoHash)\n\n        const hash1Buffer = await hash(hex2arr(this._utfToHex('req1') + this._sharedSecret))\n\n        const hash2Buffer = await hash(hex2arr(this._utfToHex('req2') + infoHash))\n        const hash3Buffer = await hash(hex2arr(this._utfToHex('req3') + this._sharedSecret))\n        const hashesXorBuffer = xor(hash2Buffer, hash3Buffer)\n\n        const padCLen = new DataView(randomBytes(2).buffer).getUint16(0) % 512\n        const padCBuffer = randomBytes(padCLen)\n\n        let vcAndProvideBuffer = new Uint8Array(8 + 4 + 2 + padCLen + 2)\n        vcAndProvideBuffer.set(VC)\n        vcAndProvideBuffer.set(CRYPTO_PROVIDE, 8)\n\n        const view = new DataView(vcAndProvideBuffer.buffer)\n\n        view.setInt16(12, padCLen) // pad C length\n        padCBuffer.copy(vcAndProvideBuffer, 14)\n        view.setInt16(14 + padCLen, 0) // IA length\n        vcAndProvideBuffer = this._encryptHandshake(vcAndProvideBuffer)\n\n        this._push(concat([hash1Buffer, hashesXorBuffer, vcAndProvideBuffer]))\n    }\n\n    async sendPe4 (infoHash) {\n        await this.setEncrypt(this._sharedSecret, infoHash)\n\n        const padDLen = new DataView(randomBytes(2).buffer).getUint16(0) % 512\n        const padDBuffer = randomBytes(padDLen)\n        let vcAndSelectBuffer = new Uint8Array(8 + 4 + 2 + padDLen)\n        const view = new DataView(vcAndSelectBuffer.buffer)\n\n        vcAndSelectBuffer.set(VC)\n        vcAndSelectBuffer.set(CRYPTO_SELECT, 8)\n        view.setInt16(12, padDLen) // lenD?\n        vcAndSelectBuffer.set(padDBuffer, 14)\n        vcAndSelectBuffer = this._encryptHandshake(vcAndSelectBuffer)\n        this._push(vcAndSelectBuffer)\n        this._cryptoHandshakeDone = true\n        this._debug('completed crypto handshake')\n    }\n\n    /**\n   * Message: \"handshake\" <pstrlen><pstr><reserved><info_hash><peer_id>\n   * @param  {Uint8Array|string} infoHash (as Buffer or *hex* string)\n   * @param  {Uint8Array|string} peerId\n   * @param  {Object} extensions\n   */\n    handshake (infoHash, peerId, extensions) {\n        let infoHashBuffer\n        let peerIdBuffer\n        if (typeof infoHash === 'string') {\n            infoHash = infoHash.toLowerCase()\n            infoHashBuffer = hex2arr(infoHash)\n        } else {\n            infoHashBuffer = infoHash\n            infoHash = arr2hex(infoHashBuffer)\n        }\n        if (typeof peerId === 'string') {\n            peerIdBuffer = hex2arr(peerId)\n        } else {\n            peerIdBuffer = peerId\n            peerId = arr2hex(peerIdBuffer)\n        }\n\n        this._infoHash = infoHashBuffer\n\n        if (infoHashBuffer.length !== 20 || peerIdBuffer.length !== 20) {\n            throw new Error('infoHash and peerId MUST have length 20')\n        }\n\n        this._debug('handshake i=%s p=%s exts=%o', infoHash, peerId, extensions)\n\n        const reserved = new Uint8Array(MESSAGE_RESERVED)\n\n        this.extensions = {\n            extended: true,\n            dht: !!(extensions && extensions.dht),\n            fast: !!(extensions && extensions.fast)\n        }\n\n        reserved[5] |= 0x10 // enable extended message\n        if (this.extensions.dht) reserved[7] |= 0x01\n        if (this.extensions.fast) reserved[7] |= 0x04\n\n        // BEP6 Fast Extension: The extension is enabled only if both ends of the connection set this bit.\n        if (this.extensions.fast && this.peerExtensions.fast) {\n            this._debug('fast extension is enabled')\n            this.hasFast = true\n        }\n        this._push(concat([MESSAGE_PROTOCOL, reserved, infoHashBuffer, peerIdBuffer]))\n        this._handshakeSent = true\n\n        if (this.peerExtensions.extended && !this._extendedHandshakeSent) {\n            // Peer's handshake indicated support already\n            // (incoming connection)\n            this._sendExtendedHandshake()\n        }\n    }\n\n    /* Peer supports BEP-0010, send extended handshake.\n   *\n   * This comes after the 'handshake' event to give the user a chance to populate\n   * `this.extendedHandshake` and `this.extendedMapping` before the extended handshake\n   * is sent to the remote peer.\n   */\n    _sendExtendedHandshake () {\n    // Create extended message object from registered extensions\n        const msg = Object.assign({}, this.extendedHandshake)\n        msg.m = {}\n        for (const ext in this.extendedMapping) {\n            const name = this.extendedMapping[ext]\n            msg.m[name] = Number(ext)\n        }\n\n        // Send extended handshake\n        this.extended(0, bencode.encode(msg))\n        this._extendedHandshakeSent = true\n    }\n\n    /**\n   * Message \"choke\": <len=0001><id=0>\n   */\n    choke () {\n        if (this.amChoking) return\n        this.amChoking = true\n        this._debug('choke')\n        this._push(MESSAGE_CHOKE)\n\n        if (this.hasFast) {\n            // BEP6: If a peer sends a choke, it MUST reject all requests from the peer to whom the choke\n            // was sent except it SHOULD NOT reject requests for pieces that are in the allowed fast set.\n            let allowedCount = 0\n            while (this.peerRequests.length > allowedCount) { // until only allowed requests are left\n                const request = this.peerRequests[allowedCount] // first non-allowed request\n                if (this.allowedFastSet.includes(request.piece)) {\n                    ++allowedCount // count request as allowed\n                } else {\n                    this.reject(request.piece, request.offset, request.length) // removes from this.peerRequests\n                }\n            }\n        } else {\n            while (this.peerRequests.length) {\n                this.peerRequests.pop()\n            }\n        }\n    }\n\n    /**\n   * Message \"unchoke\": <len=0001><id=1>\n   */\n    unchoke () {\n        if (!this.amChoking) return\n        this.amChoking = false\n        this._debug('unchoke')\n        this._push(MESSAGE_UNCHOKE)\n    }\n\n    /**\n   * Message \"interested\": <len=0001><id=2>\n   */\n    interested () {\n        if (this.amInterested) return\n        this.amInterested = true\n        this._debug('interested')\n        this._push(MESSAGE_INTERESTED)\n    }\n\n    /**\n   * Message \"uninterested\": <len=0001><id=3>\n   */\n    uninterested () {\n        if (!this.amInterested) return\n        this.amInterested = false\n        this._debug('uninterested')\n        this._push(MESSAGE_UNINTERESTED)\n    }\n\n    /**\n   * Message \"have\": <len=0005><id=4><piece index>\n   * @param  {number} index\n   */\n    have (index) {\n        this._debug('have %d', index)\n        this._message(4, [index], null)\n    }\n\n    /**\n   * Message \"bitfield\": <len=0001+X><id=5><bitfield>\n   * @param  {BitField|Buffer} bitfield\n   */\n    bitfield (bitfield) {\n        this._debug('bitfield')\n        if (!ArrayBuffer.isView(bitfield)) bitfield = bitfield.buffer\n        this._message(5, [], bitfield)\n    }\n\n    /**\n   * Message \"request\": <len=0013><id=6><index><begin><length>\n   * @param  {number}   index\n   * @param  {number}   offset\n   * @param  {number}   length\n   * @param  {function} cb\n   */\n    request (index, offset, length, cb) {\n        if (!cb) cb = () => {}\n        if (this._finished) return cb(new Error('wire is closed'))\n\n        if (this.peerChoking && !(this.hasFast && this.peerAllowedFastSet.includes(index))) {\n            return cb(new Error('peer is choking'))\n        }\n\n        this._debug('request index=%d offset=%d length=%d', index, offset, length)\n\n        this.requests.push(new Request(index, offset, length, cb))\n        if (!this._timeout) {\n            this._resetTimeout(true)\n        }\n        this._message(6, [index, offset, length], null)\n    }\n\n    /**\n   * Message \"piece\": <len=0009+X><id=7><index><begin><block>\n   * @param  {number} index\n   * @param  {number} offset\n   * @param  {Uint8Array} buffer\n   */\n    piece (index, offset, buffer) {\n        this._debug('piece index=%d offset=%d', index, offset)\n        this._message(7, [index, offset], buffer)\n        this.uploaded += buffer.length\n        this.uploadSpeed(buffer.length)\n        this.emit('upload', buffer.length)\n    }\n\n    /**\n   * Message \"cancel\": <len=0013><id=8><index><begin><length>\n   * @param  {number} index\n   * @param  {number} offset\n   * @param  {number} length\n   */\n    cancel (index, offset, length) {\n        this._debug('cancel index=%d offset=%d length=%d', index, offset, length)\n        this._callback(\n            this._pull(this.requests, index, offset, length),\n            new Error('request was cancelled'),\n            null\n        )\n        this._message(8, [index, offset, length], null)\n    }\n\n    /**\n   * Message: \"port\" <len=0003><id=9><listen-port>\n   * @param {Number} port\n   */\n    port (port) {\n        this._debug('port %d', port)\n        const message = new Uint8Array(MESSAGE_PORT)\n        const view = new DataView(message.buffer)\n        view.setUint16(5, port)\n        this._push(message)\n    }\n\n    /**\n   * Message: \"suggest\" <len=0x0005><id=0x0D><piece index> (BEP6)\n   * @param {number} index\n   */\n    suggest (index) {\n        if (!this.hasFast) throw Error('fast extension is disabled')\n        this._debug('suggest %d', index)\n        this._message(0x0D, [index], null)\n    }\n\n    /**\n   * Message: \"have-all\" <len=0x0001><id=0x0E> (BEP6)\n   */\n    haveAll () {\n        if (!this.hasFast) throw Error('fast extension is disabled')\n        this._debug('have-all')\n        this._push(MESSAGE_HAVE_ALL)\n    }\n\n    /**\n   * Message: \"have-none\" <len=0x0001><id=0x0F> (BEP6)\n   */\n    haveNone () {\n        if (!this.hasFast) throw Error('fast extension is disabled')\n        this._debug('have-none')\n        this._push(MESSAGE_HAVE_NONE)\n    }\n\n    /**\n   * Message \"reject\": <len=0x000D><id=0x10><index><offset><length> (BEP6)\n   * @param  {number}   index\n   * @param  {number}   offset\n   * @param  {number}   length\n   */\n    reject (index, offset, length) {\n        if (!this.hasFast) throw Error('fast extension is disabled')\n        this._debug('reject index=%d offset=%d length=%d', index, offset, length)\n        this._pull(this.peerRequests, index, offset, length)\n        this._message(0x10, [index, offset, length], null)\n    }\n\n    /**\n   * Message: \"allowed-fast\" <len=0x0005><id=0x11><piece index> (BEP6)\n   * @param {number} index\n   */\n    allowedFast (index) {\n        if (!this.hasFast) throw Error('fast extension is disabled')\n        this._debug('allowed-fast %d', index)\n        if (!this.allowedFastSet.includes(index)) this.allowedFastSet.push(index)\n        this._message(0x11, [index], null)\n    }\n\n    /**\n   * Message: \"extended\" <len=0005+X><id=20><ext-number><payload>\n   * @param  {number|string} ext\n   * @param  {Object} obj\n   */\n    extended (ext, obj) {\n        this._debug('extended ext=%s', ext)\n        if (typeof ext === 'string' && this.peerExtendedMapping[ext]) {\n            ext = this.peerExtendedMapping[ext]\n        }\n        if (typeof ext === 'number') {\n            const extId = new Uint8Array([ext])\n            const buf = ArrayBuffer.isView(obj) ? obj : bencode.encode(obj)\n\n            this._message(20, [], concat([extId, buf]))\n        } else {\n            throw new Error(`Unrecognized extension: ${ext}`)\n        }\n    }\n\n    /**\n   * Sets the encryption method for this wire, as per PSE/ME specification\n   *\n   * @param {string} sharedSecret:  A hex-encoded string, which is the shared secret agreed\n   *                                upon from DH key exchange\n   * @param {string} infoHash:  A hex-encoded info hash\n   * @returns boolean, true if encryption setting succeeds, false if it fails.\n   */\n    async setEncrypt (sharedSecret, infoHash) {\n        let encryptKeyBuf\n        let encryptKeyIntArray\n        let decryptKeyBuf\n        let decryptKeyIntArray\n        switch (this.type) {\n            case 'tcpIncoming':\n                encryptKeyBuf = await hash(hex2arr(this._utfToHex('keyB') + sharedSecret + infoHash))\n                decryptKeyBuf = await hash(hex2arr(this._utfToHex('keyA') + sharedSecret + infoHash))\n                encryptKeyIntArray = []\n                for (const value of encryptKeyBuf.values()) {\n                    encryptKeyIntArray.push(value)\n                }\n                decryptKeyIntArray = []\n                for (const value of decryptKeyBuf.values()) {\n                    decryptKeyIntArray.push(value)\n                }\n                this._encryptGenerator = new RC4(encryptKeyIntArray)\n                this._decryptGenerator = new RC4(decryptKeyIntArray)\n                break\n            case 'tcpOutgoing':\n                encryptKeyBuf = await hash(hex2arr(this._utfToHex('keyA') + sharedSecret + infoHash))\n                decryptKeyBuf = await hash(hex2arr(this._utfToHex('keyB') + sharedSecret + infoHash))\n                encryptKeyIntArray = []\n                for (const value of encryptKeyBuf.values()) {\n                    encryptKeyIntArray.push(value)\n                }\n                decryptKeyIntArray = []\n                for (const value of decryptKeyBuf.values()) {\n                    decryptKeyIntArray.push(value)\n                }\n                this._encryptGenerator = new RC4(encryptKeyIntArray)\n                this._decryptGenerator = new RC4(decryptKeyIntArray)\n                break\n            default:\n                return false\n        }\n\n        // Discard the first 1024 bytes, as per MSE/PE implementation\n        for (let i = 0; i < 1024; i++) {\n            this._encryptGenerator.randomByte()\n            this._decryptGenerator.randomByte()\n        }\n\n        this._setGenerators = true\n        return true\n    }\n\n    /**\n   * Send a message to the remote peer.\n   */\n    _message (id, numbers, data) {\n        const dataLength = data ? data.length : 0\n        const buffer = new Uint8Array(5 + (4 * numbers.length))\n        const view = new DataView(buffer.buffer)\n\n        view.setUint32(0, buffer.length + dataLength - 4)\n        buffer[4] = id\n        for (let i = 0; i < numbers.length; i++) {\n            view.setUint32(5 + (4 * i), numbers[i])\n        }\n\n        this._push(buffer)\n        if (data) this._push(data)\n    }\n\n    _push (data) {\n        if (this._finished) return\n        if (this._encryptionMethod === 2 && this._cryptoHandshakeDone) {\n            data = this._encrypt(data)\n        }\n        return this.push(data)\n    }\n\n    //\n    // INCOMING MESSAGES\n    //\n\n    _onKeepAlive () {\n        this._debug('got keep-alive')\n        this.emit('keep-alive')\n    }\n\n    _onPe1 (pubKeyBuffer) {\n        this._peerPubKey = arr2hex(pubKeyBuffer)\n        this._sharedSecret = this._dh.computeSecret(this._peerPubKey, 'hex', 'hex')\n        this.emit('pe1')\n    }\n\n    _onPe2 (pubKeyBuffer) {\n        this._peerPubKey = arr2hex(pubKeyBuffer)\n        this._sharedSecret = this._dh.computeSecret(this._peerPubKey, 'hex', 'hex')\n        this.emit('pe2')\n    }\n\n    async _onPe3 (hashesXorBuffer) {\n        const hash3 = await (arr2hex(this._utfToHex('req3') + this._sharedSecret))\n        const sKeyHash = arr2hex(xor(hash3, hashesXorBuffer))\n        this.emit('pe3', sKeyHash)\n    }\n\n    _onPe3Encrypted (vcBuffer, peerProvideBuffer) {\n        if (!equal(vcBuffer, VC)) {\n            this._debug('Error: verification constant did not match')\n            this.destroy()\n            return\n        }\n\n        for (const provideByte of peerProvideBuffer.values()) {\n            if (provideByte !== 0) {\n                this._peerCryptoProvide.push(provideByte)\n            }\n        }\n        if (this._peerCryptoProvide.includes(2)) {\n            this._encryptionMethod = 2\n        } else {\n            this._debug('Error: RC4 encryption method not provided by peer')\n            this.destroy()\n        }\n    }\n\n    _onPe4 (peerSelectBuffer) {\n        this._encryptionMethod = peerSelectBuffer[3]\n        if (!CRYPTO_PROVIDE.includes(this._encryptionMethod)) {\n            this._debug('Error: peer selected invalid crypto method')\n            this.destroy()\n        }\n        this._cryptoHandshakeDone = true\n        this._debug('crypto handshake done')\n        this.emit('pe4')\n    }\n\n    _onHandshake (infoHashBuffer, peerIdBuffer, extensions) {\n        const infoHash = arr2hex(infoHashBuffer)\n        const peerId = arr2hex(peerIdBuffer)\n\n        this._debug('got handshake i=%s p=%s exts=%o', infoHash, peerId, extensions)\n\n        this.peerId = peerId\n        this.peerIdBuffer = peerIdBuffer\n        this.peerExtensions = extensions\n\n        // BEP6 Fast Extension: The extension is enabled only if both ends of the connection set this bit.\n        if (this.extensions.fast && this.peerExtensions.fast) {\n            this._debug('fast extension is enabled')\n            this.hasFast = true\n        }\n\n        this.emit('handshake', infoHash, peerId, extensions)\n\n        for (const name in this._ext) {\n            this._ext[name].onHandshake(infoHash, peerId, extensions)\n        }\n\n        if (extensions.extended && this._handshakeSent &&\n        !this._extendedHandshakeSent) {\n            // outgoing connection\n            this._sendExtendedHandshake()\n        }\n    }\n\n    _onChoke () {\n        this.peerChoking = true\n        this._debug('got choke')\n        this.emit('choke')\n        if (!this.hasFast) {\n            // BEP6 Fast Extension: Choke no longer implicitly rejects all pending requests\n            while (this.requests.length) {\n                this._callback(this.requests.pop(), new Error('peer is choking'), null)\n            }\n        }\n    }\n\n    _onUnchoke () {\n        this.peerChoking = false\n        this._debug('got unchoke')\n        this.emit('unchoke')\n    }\n\n    _onInterested () {\n        this.peerInterested = true\n        this._debug('got interested')\n        this.emit('interested')\n    }\n\n    _onUninterested () {\n        this.peerInterested = false\n        this._debug('got uninterested')\n        this.emit('uninterested')\n    }\n\n    _onHave (index) {\n        if (this.peerPieces.get(index)) return\n        this._debug('got have %d', index)\n\n        this.peerPieces.set(index, true)\n        this.emit('have', index)\n    }\n\n    _onBitField (buffer) {\n        this.peerPieces = new BitField(buffer)\n        this._debug('got bitfield')\n        this.emit('bitfield', this.peerPieces)\n    }\n\n    _onRequest (index, offset, length) {\n        if (this.amChoking && !(this.hasFast && this.allowedFastSet.includes(index))) {\n            // BEP6: If a peer receives a request from a peer its choking, the peer receiving\n            // the request SHOULD send a reject unless the piece is in the allowed fast set.\n            if (this.hasFast) this.reject(index, offset, length)\n            return\n        }\n        this._debug('got request index=%d offset=%d length=%d', index, offset, length)\n\n        const respond = (err, buffer) => {\n            if (request !== this._pull(this.peerRequests, index, offset, length)) return\n            if (err) {\n                this._debug('error satisfying request index=%d offset=%d length=%d (%s)', index, offset, length, err.message)\n                if (this.hasFast) this.reject(index, offset, length)\n                return\n            }\n            this.piece(index, offset, buffer)\n        }\n\n        const request = new Request(index, offset, length, respond)\n        this.peerRequests.push(request)\n        this.emit('request', index, offset, length, respond)\n    }\n\n    _onPiece (index, offset, buffer) {\n        this._debug('got piece index=%d offset=%d', index, offset)\n        this._callback(this._pull(this.requests, index, offset, buffer.length), null, buffer)\n        this.downloaded += buffer.length\n        this.downloadSpeed(buffer.length)\n        this.emit('download', buffer.length)\n        this.emit('piece', index, offset, buffer)\n    }\n\n    _onCancel (index, offset, length) {\n        this._debug('got cancel index=%d offset=%d length=%d', index, offset, length)\n        this._pull(this.peerRequests, index, offset, length)\n        this.emit('cancel', index, offset, length)\n    }\n\n    _onPort (port) {\n        this._debug('got port %d', port)\n        this.emit('port', port)\n    }\n\n    _onSuggest (index) {\n        if (!this.hasFast) {\n            // BEP6: the peer MUST close the connection\n            this._debug('Error: got suggest whereas fast extension is disabled')\n            this.destroy()\n            return\n        }\n        this._debug('got suggest %d', index)\n        this.emit('suggest', index)\n    }\n\n    _onHaveAll () {\n        if (!this.hasFast) {\n            // BEP6: the peer MUST close the connection\n            this._debug('Error: got have-all whereas fast extension is disabled')\n            this.destroy()\n            return\n        }\n        this._debug('got have-all')\n        this.peerPieces = new HaveAllBitField()\n        this.emit('have-all')\n    }\n\n    _onHaveNone () {\n        if (!this.hasFast) {\n            // BEP6: the peer MUST close the connection\n            this._debug('Error: got have-none whereas fast extension is disabled')\n            this.destroy()\n            return\n        }\n        this._debug('got have-none')\n        this.emit('have-none')\n    }\n\n    _onReject (index, offset, length) {\n        if (!this.hasFast) {\n            // BEP6: the peer MUST close the connection\n            this._debug('Error: got reject whereas fast extension is disabled')\n            this.destroy()\n            return\n        }\n        this._debug('got reject index=%d offset=%d length=%d', index, offset, length)\n        this._callback(\n            this._pull(this.requests, index, offset, length),\n            new Error('request was rejected'),\n            null\n        )\n        this.emit('reject', index, offset, length)\n    }\n\n    _onAllowedFast (index) {\n        if (!this.hasFast) {\n            // BEP6: the peer MUST close the connection\n            this._debug('Error: got allowed-fast whereas fast extension is disabled')\n            this.destroy()\n            return\n        }\n        this._debug('got allowed-fast %d', index)\n        if (!this.peerAllowedFastSet.includes(index)) this.peerAllowedFastSet.push(index)\n        if (this.peerAllowedFastSet.length > ALLOWED_FAST_SET_MAX_LENGTH) this.peerAllowedFastSet.shift()\n        this.emit('allowed-fast', index)\n    }\n\n    _onExtended (ext, buf) {\n        if (ext === 0) {\n            let info\n            try {\n                info = bencode.decode(buf)\n            } catch (err) {\n                this._debug('ignoring invalid extended handshake: %s', err.message || err)\n            }\n\n            if (!info) return\n            this.peerExtendedHandshake = info\n\n            if (typeof info.m === 'object') {\n                for (const name in info.m) {\n                    this.peerExtendedMapping[name] = Number(info.m[name].toString())\n                }\n            }\n            for (const name in this._ext) {\n                if (this.peerExtendedMapping[name]) {\n                    this._ext[name].onExtendedHandshake(this.peerExtendedHandshake)\n                }\n            }\n            this._debug('got extended handshake')\n            this.emit('extended', 'handshake', this.peerExtendedHandshake)\n        } else {\n            if (this.extendedMapping[ext]) {\n                ext = this.extendedMapping[ext] // friendly name for extension\n                if (this._ext[ext]) {\n                    // there is an registered extension handler, so call it\n                    this._ext[ext].onMessage(buf)\n                }\n            }\n            this._debug('got extended message ext=%s', ext)\n            this.emit('extended', ext, buf)\n        }\n    }\n\n    _onTimeout () {\n        this._debug('request timed out')\n        this._callback(this.requests.shift(), new Error('request has timed out'), null)\n        this.emit('timeout')\n    }\n\n    /**\n   * Duplex stream method. Called whenever the remote peer has data for us. Data that the\n   * remote peer sends gets buffered (i.e. not actually processed) until the right number\n   * of bytes have arrived, determined by the last call to `this._parse(number, callback)`.\n   * Once enough bytes have arrived to process the message, the callback function\n   * (i.e. `this._parser`) gets called with the full buffer of data.\n   * @param  {Uint8Array} data\n   * @param  {function} cb\n   */\n    _write (data, cb) {\n        if (this._encryptionMethod === 2 && this._cryptoHandshakeDone) {\n            data = this._decrypt(data)\n        }\n        this._bufferSize += data.length\n        this._buffer.push(data)\n        if (this._buffer.length > 1) {\n            this._buffer = [concat(this._buffer, this._bufferSize)]\n        }\n        // now this._buffer is an array containing a single Buffer\n        if (this._cryptoSyncPattern) {\n            const index = this._buffer[0].indexOf(this._cryptoSyncPattern)\n            if (index !== -1) {\n                this._buffer[0] = this._buffer[0].slice(index + this._cryptoSyncPattern.length)\n                this._bufferSize -= (index + this._cryptoSyncPattern.length)\n                this._cryptoSyncPattern = null\n            } else if (this._bufferSize + data.length > this._waitMaxBytes + this._cryptoSyncPattern.length) {\n                this._debug('Error: could not resynchronize')\n                this.destroy()\n                return\n            }\n        }\n\n        while (this._bufferSize >= this._parserSize && !this._cryptoSyncPattern) {\n            if (this._parserSize === 0) {\n                this._parser(new Uint8Array())\n            } else {\n                const buffer = this._buffer[0]\n                // console.log('buffer:', this._buffer)\n                this._bufferSize -= this._parserSize\n                this._buffer = this._bufferSize\n                    ? [buffer.slice(this._parserSize)]\n                    : []\n                this._parser(buffer.slice(0, this._parserSize))\n            }\n        }\n\n        cb(null) // Signal that we're ready for more data\n    }\n\n    _callback (request, err, buffer) {\n        if (!request) return\n\n        this._resetTimeout(!this.peerChoking && !this._finished)\n\n        request.callback(err, buffer)\n    }\n\n    _resetTimeout (setAgain) {\n        if (!setAgain || !this._timeoutMs || !this.requests.length) {\n            clearTimeout(this._timeout)\n            this._timeout = null\n            this._timeoutExpiresAt = null\n            return\n        }\n\n        const timeoutExpiresAt = Date.now() + this._timeoutMs\n\n        if (this._timeout) {\n            // If existing expiration is already within 5% of correct, it's close enough\n            if (timeoutExpiresAt - this._timeoutExpiresAt < this._timeoutMs * 0.05) {\n                return\n            }\n            clearTimeout(this._timeout)\n        }\n\n        this._timeoutExpiresAt = timeoutExpiresAt\n        this._timeout = setTimeout(() => this._onTimeout(), this._timeoutMs)\n        if (this._timeoutUnref && this._timeout.unref) this._timeout.unref()\n    }\n\n    /**\n   * Takes a number of bytes that the local peer is waiting to receive from the remote peer\n   * in order to parse a complete message, and a callback function to be called once enough\n   * bytes have arrived.\n   * @param  {number} size\n   * @param  {function} parser\n   */\n    _parse (size, parser) {\n        this._parserSize = size\n        this._parser = parser\n    }\n\n    _parseUntil (pattern, maxBytes) {\n        this._cryptoSyncPattern = pattern\n        this._waitMaxBytes = maxBytes\n    }\n\n    /**\n   * Handle the first 4 bytes of a message, to determine the length of bytes that must be\n   * waited for in order to have the whole message.\n   * @param  {Uint8Array} buffer\n   */\n    _onMessageLength (buffer) {\n        const length = new DataView(buffer.buffer, buffer.byteOffset, buffer.byteLength).getUint32(0)\n        if (length > 0) {\n            this._parse(length, this._onMessage)\n        } else {\n            this._onKeepAlive()\n            this._parse(4, this._onMessageLength)\n        }\n    }\n\n    /**\n   * Handle a message from the remote peer.\n   * @param  {Uint8Array} buffer\n   */\n    _onMessage (buffer) {\n        this._parse(4, this._onMessageLength)\n        const view = new DataView(buffer.buffer, buffer.byteOffset, buffer.byteLength)\n        switch (buffer[0]) {\n            case 0:\n                return this._onChoke()\n            case 1:\n                return this._onUnchoke()\n            case 2:\n                return this._onInterested()\n            case 3:\n                return this._onUninterested()\n            case 4:\n                return this._onHave(view.getUint32(1))\n            case 5:\n                return this._onBitField(buffer.slice(1))\n            case 6:\n                return this._onRequest(\n                    view.getUint32(1),\n                    view.getUint32(5),\n                    view.getUint32(9)\n                )\n            case 7:\n                return this._onPiece(\n                    view.getUint32(1),\n                    view.getUint32(5),\n                    buffer.slice(9)\n                )\n            case 8:\n                return this._onCancel(\n                    view.getUint32(1),\n                    view.getUint32(5),\n                    view.getUint32(9)\n                )\n            case 9:\n                return this._onPort(view.getUint16(1))\n            case 0x0D:\n                return this._onSuggest(view.getUint32(1))\n            case 0x0E:\n                return this._onHaveAll()\n            case 0x0F:\n                return this._onHaveNone()\n            case 0x10:\n                return this._onReject(\n                    view.getUint32(1),\n                    view.getUint32(5),\n                    view.getUint32(9)\n                )\n            case 0x11:\n                return this._onAllowedFast(view.getUint32(1))\n            case 20:\n                return this._onExtended(buffer[1], buffer.slice(2))\n            default:\n                this._debug('got unknown message')\n                return this.emit('unknownmessage', buffer)\n        }\n    }\n\n    _determineHandshakeType () {\n        this._parse(1, pstrLenBuffer => {\n            const pstrlen = pstrLenBuffer[0]\n            if (pstrlen === 19) {\n                this._parse(pstrlen + 48, this._onHandshakeBuffer)\n            } else {\n                this._parsePe1(pstrLenBuffer)\n            }\n        })\n    }\n\n    _parsePe1 (pubKeyPrefix) {\n        this._parse(95, pubKeySuffix => {\n            this._onPe1(concat([pubKeyPrefix, pubKeySuffix]))\n            this._parsePe3()\n        })\n    }\n\n    _parsePe2 () {\n        this._parse(96, pubKey => {\n            this._onPe2(pubKey)\n            while (!this._setGenerators) {\n                // Wait until generators have been set\n            }\n            this._parsePe4()\n        })\n    }\n\n    // Handles the unencrypted portion of step 4\n    async _parsePe3 () {\n        const hash1Buffer = await hash(hex2arr(this._utfToHex('req1') + this._sharedSecret))\n        // synchronize on HASH('req1', S)\n        this._parseUntil(hash1Buffer, 512)\n        this._parse(20, buffer => {\n            this._onPe3(buffer)\n            while (!this._setGenerators) {\n                // Wait until generators have been set\n            }\n            this._parsePe3Encrypted()\n        })\n    }\n\n    _parsePe3Encrypted () {\n        this._parse(14, buffer => {\n            const vcBuffer = this._decryptHandshake(buffer.slice(0, 8))\n            const peerProvideBuffer = this._decryptHandshake(buffer.slice(8, 12))\n            const padCLen = new DataView(this._decryptHandshake(buffer.slice(12, 14)).buffer).getUint16(0)\n            this._parse(padCLen, padCBuffer => {\n                padCBuffer = this._decryptHandshake(padCBuffer)\n                this._parse(2, iaLenBuf => {\n                    const iaLen = new DataView(this._decryptHandshake(iaLenBuf).buffer).getUint16(0)\n                    this._parse(iaLen, iaBuffer => {\n                        iaBuffer = this._decryptHandshake(iaBuffer)\n                        this._onPe3Encrypted(vcBuffer, peerProvideBuffer, padCBuffer, iaBuffer)\n                        const pstrlen = iaLen ? iaBuffer[0] : null\n                        const protocol = iaLen ? iaBuffer.slice(1, 20) : null\n                        if (pstrlen === 19 && arr2text(protocol) === 'BitTorrent protocol') {\n                            this._onHandshakeBuffer(iaBuffer.slice(1))\n                        } else {\n                            this._parseHandshake()\n                        }\n                    })\n                })\n            })\n        })\n    }\n\n    _parsePe4 () {\n    // synchronize on ENCRYPT(VC).\n    // since we encrypt using bitwise xor, decryption and encryption are the same operation.\n    // calling _decryptHandshake here advances the decrypt generator keystream forward 8 bytes\n        const vcBufferEncrypted = this._decryptHandshake(VC)\n        this._parseUntil(vcBufferEncrypted, 512)\n        this._parse(6, buffer => {\n            const peerSelectBuffer = this._decryptHandshake(buffer.slice(0, 4))\n            const padDLen = new DataView(this._decryptHandshake(buffer.slice(4, 6)).buffer).getUint16(0)\n            this._parse(padDLen, padDBuf => {\n                this._decryptHandshake(padDBuf)\n                this._onPe4(peerSelectBuffer)\n                this._parseHandshake(null)\n            })\n        })\n    }\n\n    /**\n   * Reads the handshake as specified by the bittorrent wire protocol.\n   */\n    _parseHandshake () {\n        this._parse(1, buffer => {\n            const pstrlen = buffer[0]\n            if (pstrlen !== 19) {\n                this._debug('Error: wire not speaking BitTorrent protocol (%s)', pstrlen.toString())\n                this.end()\n                return\n            }\n            this._parse(pstrlen + 48, this._onHandshakeBuffer)\n        })\n    }\n\n    _onHandshakeBuffer (handshake) {\n        const protocol = handshake.slice(0, 19)\n        if (arr2text(protocol) !== 'BitTorrent protocol') {\n            this._debug('Error: wire not speaking BitTorrent protocol (%s)', arr2text(protocol))\n            this.end()\n            return\n        }\n        handshake = handshake.slice(19)\n        this._onHandshake(handshake.slice(8, 28), handshake.slice(28, 48), {\n            dht: !!(handshake[7] & 0x01), // see bep_0005\n            fast: !!(handshake[7] & 0x04), // see bep_0006\n            extended: !!(handshake[5] & 0x10) // see bep_0010\n        })\n        this._parse(4, this._onMessageLength)\n    }\n\n    _onFinish () {\n        this._finished = true\n\n        this.push(null) // stream cannot be half open, so signal the end of it\n        while (this.read()) {\n            // body intentionally empty\n            // consume and discard the rest of the stream data\n        }\n\n        clearInterval(this._keepAliveInterval)\n        this._parse(Number.MAX_VALUE, () => {})\n        while (this.peerRequests.length) {\n            this.peerRequests.pop()\n        }\n        while (this.requests.length) {\n            this._callback(this.requests.pop(), new Error('wire was closed'), null)\n        }\n    }\n\n    _debug (...args) {\n        args[0] = `[${this._debugId}] ${args[0]}`\n        debug(...args)\n    }\n\n    _pull (requests, piece, offset, length) {\n        for (let i = 0; i < requests.length; i++) {\n            const req = requests[i]\n            if (req.piece === piece && req.offset === offset && req.length === length) {\n                arrayRemove(requests, i)\n                return req\n            }\n        }\n        return null\n    }\n\n    _encryptHandshake (buf) {\n        const crypt = new Uint8Array(buf)\n        if (!this._encryptGenerator) {\n            this._debug('Warning: Encrypting without any generator')\n            return crypt\n        }\n\n        for (let i = 0; i < buf.length; i++) {\n            const keystream = this._encryptGenerator.randomByte()\n            crypt[i] = crypt[i] ^ keystream\n        }\n\n        return crypt\n    }\n\n    _encrypt (buf) {\n        const crypt = new Uint8Array(buf)\n\n        if (!this._encryptGenerator || this._encryptionMethod !== 2) {\n            return crypt\n        }\n        for (let i = 0; i < buf.length; i++) {\n            const keystream = this._encryptGenerator.randomByte()\n            crypt[i] = crypt[i] ^ keystream\n        }\n\n        return crypt\n    }\n\n    _decryptHandshake (buf) {\n        const decrypt = new Uint8Array(buf)\n\n        if (!this._decryptGenerator) {\n            this._debug('Warning: Decrypting without any generator')\n            return decrypt\n        }\n        for (let i = 0; i < buf.length; i++) {\n            const keystream = this._decryptGenerator.randomByte()\n            decrypt[i] = decrypt[i] ^ keystream\n        }\n\n        return decrypt\n    }\n\n    _decrypt (buf) {\n        const decrypt = new Uint8Array(buf)\n\n        if (!this._decryptGenerator || this._encryptionMethod !== 2) {\n            return decrypt\n        }\n        for (let i = 0; i < buf.length; i++) {\n            const keystream = this._decryptGenerator.randomByte()\n            decrypt[i] = decrypt[i] ^ keystream\n        }\n\n        return decrypt\n    }\n\n    _utfToHex (str) {\n        return arr2hex(text2arr(str))\n    }\n}\n\nexport default Wire\n"],
  "mappings": "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",
  "names": []
}
